source containers: 

source_deque: 10 20 30 40 50 
source_deque_2: 10 20 30 60 70 80 


--- Modifying ---

transform form one

back_ins_itr = std::transform(source_deque.begin(), source_deque.end(), back_ins_itr, [](const int& i)-> int { return i * 2; });
target_deque: 20 40 60 80 100 

transform form two

cleared target_deque
back_ins_itr = std::transform(source_deque.begin(), source_deque.end(), source_deque_2.begin(), back_ins_itr, [](const int& i, const int& j)-> int { return i * j; });
target_deque: 100 400 900 2400 3500 

copy

cleared target_deque
back_ins_itr = std::copy(source_deque.begin(), source_deque.end(), back_ins_itr);
target_deque: 10 20 30 40 50 

copy_if

cleared target_deque
back_ins_itr = std::copy_if(source_deque.begin(), source_deque.end(), back_ins_itr, [](const int& i)-> bool { return i > 20; });
target_deque: 30 40 50 

remove_copy

cleared target_deque
back_ins_itr = std::remove_copy(source_deque.begin(), source_deque.end(), back_ins_itr, 20);
target_deque: 10 30 40 50 

remove_copy_if

cleared target_deque
back_ins_itr = std::remove_copy_if(source_deque.begin(), source_deque.end(), back_ins_itr, [](const int& i)-> bool { return i > 20; });
target_deque: 10 20 

move

cleared target_deque
back_ins_itr = std::move(source_deque.begin(), source_deque.end(), back_ins_itr);
target_deque: 10 20 30 40 50 
source ints will stay valid after moving because of ints move constructor isnt destructive

generate_n

cleared target_deque
back_ins_itr = std::generate_n(back_ins_itr, 10, []()-> int { return 5; });
target_deque: 5 5 5 5 5 5 5 5 5 5 


--- Sorting ---

source_deque: 10 20 30 40 50 
source_deque_2: 10 20 30 60 70 80 

merge

cleared target_deque
front_ins_itr = std::merge(source_deque.begin(), source_deque.end(), source_deque_2.begin(), source_deque_2.end(), front_ins_itr);
target_deque: 80 70 60 50 40 30 30 20 20 10 10 


--- Set ---

source_deque: 10 20 30 40 50 
source_deque_2: 10 20 30 60 70 80 

set_union

cleared target_deque
back_ins_itr = std::set_union(source_deque.begin(), source_deque.end(), source_deque_2.begin(), source_deque_2.end(), back_ins_itr);
target_deque: 10 20 30 40 50 60 70 80 

set_intersection

cleared target_deque
back_ins_itr = std::set_intersection(source_deque.begin(), source_deque.end(), source_deque_2.begin(), source_deque_2.end(), back_ins_itr);
target_deque: 10 20 30 

set_difference

cleared target_deque
back_ins_itr = std::set_difference(source_deque.begin(), source_deque.end(), source_deque_2.begin(), source_deque_2.end(), back_ins_itr);
target_deque: 40 50 

set_symmetric_difference

cleared target_deque
back_ins_itr = std::set_symmetric_difference(source_deque.begin(), source_deque.end(), source_deque_2.begin(), source_deque_2.end(), back_ins_itr);
target_deque: 40 50 60 70 80 

